name: applicative-numbers
version: 0.1.3
id: applicative-numbers-0.1.3-ccff80b5855d173b5aab60454083f9b4
license: BSD3
copyright: (c) 2009-2011 by Conal Elliott
maintainer: conal@conal.net
stability: experimental
homepage: http://haskell.org/haskellwiki/applicative-numbers
package-url: http://code.haskell.org/applicative-numbers
synopsis: Applicative-based numeric instances
description: Any applicative functor can be given numeric instances in a boilerplate way.
             The /applicative-numbers/ package provides an include file that makes it a
             snap to define these instances.
             See "Data.Numeric.Function" for an example.
             .
             Project wiki page: <http://haskell.org/haskellwiki/applicative-numbers>
             .
             Copyright 2009-2013 Conal Elliott; BSD3 license.
             .
             .
             Instances of @Num@ classes for applicative functors.  To be @#include@'d after
             defining @APPLICATIVE@ as the applicative functor name and @CONSTRAINTS@ as a
             list of constraints, which must carry its own trailing comma if non-empty.
             The @APPLICATIVE@ symbol gets @#undef@'d at the end of the include file, so
             that multiple includes are convenient.
             .
             For instance,
             .
             @
             #define INSTANCE_Ord
             #define INSTANCE_Enum
             .
             #define APPLICATIVE Vec2
             #include \"ApplicativeNumeric-inc.hs\"
             .
             #define APPLICATIVE Vec3
             #include \"ApplicativeNumeric-inc.hs\"
             .
             #define APPLICATIVE Vec4
             #include \"ApplicativeNumeric-inc.hs\"
             @
             .
             You'll also have to import 'pure' and 'liftA2' from "Control.Applicative"
             and specify @the FlexibleContexts@ language extension (due to an implementation hack).
             .
             Some instances are generated only if a corresponding CPP symbol is
             defined: @INSTANCE_Eq@, @INSTANCE_Ord@, @INSTANCE_Show@, @INSTANCE_Enum@
category: Data, Numerical
author: Conal Elliott
exposed: True
exposed-modules: Data.Numeric.Function
hidden-modules:
trusted: False
import-dirs: /home/joshkirklin/custard/musicxml2Read/musicxml2/.cabal-sandbox/lib/x86_64-linux-ghc-7.8.3/applicative-numbers-0.1.3
library-dirs: /home/joshkirklin/custard/musicxml2Read/musicxml2/.cabal-sandbox/lib/x86_64-linux-ghc-7.8.3/applicative-numbers-0.1.3
hs-libraries: HSapplicative-numbers-0.1.3
extra-libraries:
extra-ghci-libraries:
include-dirs: /home/joshkirklin/custard/musicxml2Read/musicxml2/.cabal-sandbox/lib/x86_64-linux-ghc-7.8.3/applicative-numbers-0.1.3/include
includes:
depends: base-4.7.0.1-e4b74d27ad8c8987c63abc42a80e7335
hugs-options:
cc-options:
ld-options:
framework-dirs:
frameworks:
haddock-interfaces: /home/joshkirklin/custard/musicxml2Read/musicxml2/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.8.3/applicative-numbers-0.1.3/html/applicative-numbers.haddock
haddock-html: /home/joshkirklin/custard/musicxml2Read/musicxml2/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.8.3/applicative-numbers-0.1.3/html
